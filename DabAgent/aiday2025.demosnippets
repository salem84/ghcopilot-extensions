- Prompt NoExt: Generico

  Devo fare dei test, genera nome, cognome e codice fiscale di una persona

- Prompt PeopleSkillset 1: Generico

  Generami l'anagrafica di una persona

- Prompt PeopleSkillset 2: Corretto con età
  
  Generami l'anagrafica di un uomo di 25 anni

- Prompt PeopleSkillset 3: Errato con nome

  mi generi l'anagrafica di una donna di nome simona

- Prompt PeopleSkillset 4: Errato con anno di nascita

  mi generi l'anagrafica di un ragazzo del 1990


---------------------------------------------------------------------

- DabAgent Step 1: StreamEvent

        await context.Response.WriteTextStreamEvent("Hello World!");
        await context.Response.WriteEndStreamEvent();
        return;

- DabAgent Step 2: System Prompt & Invoke Copilot

        // Get the latest user message and modify it later to include a custom prompt        
        var lastMessageContent = payload.Messages.Last(x => x.Role == "user").Content;

        payload.Messages.Clear();

        // Insert Chat prompt system messages in the message list.
        payload.Messages.Add(new ChatMessage
        {
            Role = "system",
            Content = "You are a GraphQL developer."
        });

        // Insert prompt instructions
        payload.Messages.Add(new ChatMessage
        {
            Role = "system",
            Content = $@"Response must be contain only GraphQL response in query format without any other information such as markdown or other escapes.
                Query must start with a curly brace character.
                If you cannot generate a GraphQL a 'Bad Request' error must be returned."
        });

        // Insert user query message
        payload.Messages.Add(new ChatMessage
        {
            Role = "user",
            Content = $"The user query is: '{lastMessageContent}'"
        });

        logger.LogInformation("Invoking Copilot...");
        var copilotResponse = await copilotApiService.GetStringCompletionsAsync(githubToken, payload);
        logger.LogInformation("Copilot response: {copilotResponse}", copilotResponse);


- DabAgent Step 3/1: Download Schema
        var schemaGraphQL = await graphQLService.GetGraphQLSchema(GRAPHQL_SCHEMA_PEOPLE_RELATIVE_URL);

- DabAgent Step 3/2: Insert GraphQL Schema prompt
        
        // Insert GraphQL Schema prompt
        payload.Messages.Add(new ChatMessage
        {
            Role = "system",
            Content = $"You must write a GraphQL query for a database with the following schema: {schemaGraphQL}"
        });

- DabAgent Step 4: Add model

        payload.Model = "gpt-4o";

- DabAgent Step 5: Send GraphQL query

        logger.LogInformation("Invoking GraphQL Endpoint...");
        var graphQLResponse = await graphQLService.SendGraphQLQuery(copilotResponse);
        logger.LogInformation("Dab GraphQL Endpoint response: {graphQLResponse}", graphQLResponse);

- DabAgent Step 6: Invoke Copilot final response

        payload.Messages.Clear();
        payload.Messages.Add(new ChatMessage
        {
            Role = "user",
            Content = $@"You have to inform a user using natural language. The user ask this: '{lastMessageContent}'.
                  Rewrite the GraphQL response '{graphQLResponse}' in a simple way and include also the query."
        });

        logger.LogInformation("Invoking Copilot...");
        var copilotFinalResponse = await copilotApiService.GetStreamCompletionsAsync(githubToken, payload);
        return Results.Stream(copilotFinalResponse, "application/json");

- DabAgent Prompt 1: Generico
  
  dammi il nome e cognome di una persona presente sul db

- DabAgent Prompt 2: Città

  mi dai l'anagrafica di una persona che vive a Catania