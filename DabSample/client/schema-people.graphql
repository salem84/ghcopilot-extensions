"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """Deferred when true."""
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int! = 0

  """Streamed when true."""
  if: Boolean
) on FIELD

"""
The `@oneOf` directive is used within the type system definition language
 to indicate:

 - an Input Object is a Oneof Input Object, or
 - an Object Type's Field is a Oneof Field.
"""
directive @oneOf on INPUT_OBJECT

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """Roles that are allowed to access the annotated resource."""
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) on SCHEMA | OBJECT | FIELD_DEFINITION

"""
A directive to indicate the type maps to a storable entity not a nested entity.
"""
directive @model(
  """Underlying name of the database entity."""
  name: String
) on OBJECT | FIELD_DEFINITION

"""A directive to indicate the relationship between two tables"""
directive @relationship(
  """The name of the GraphQL type the relationship targets"""
  target: String

  """The relationship cardinality"""
  cardinality: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""A directive to indicate the primary key field of an item."""
directive @primaryKey(
  """The underlying database type."""
  databaseType: String
) on FIELD_DEFINITION

"""
When present on a field in a database table, indicates that the field is a referencing field to some field in the same/another database table.
"""
directive @dab_referencingField on FIELD_DEFINITION

"""The default value to be used when creating an item."""
directive @defaultValue(value: DefaultValue) on FIELD_DEFINITION

"""Indicates that a field is auto generated by the database."""
directive @autoGenerated on FIELD_DEFINITION

enum OrderBy {
  ASC
  DESC
}

input DefaultValue {
  Byte: Byte
  Short: Short
  Int: Int
  Long: Long
  String: String
  Boolean: Boolean
  Single: Single
  Float: Float
  Decimal: Decimal
  DateTime: DateTime
  ByteArray: ByteArray
  LocalTime: LocalTime
}


type Person {
  id: Int!
  first_name: String!
  last_name: String!
  gender: String!
  birth_date: DateTime!
  tax_code: String!
  city_id: Int!
  cities: City!
}

type City {
  id: Int!
  name: String!
  people(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: PersonFilterInput

    """Ordering options for query"""
    orderBy: PersonOrderByInput
  ): PersonConnection
}

"""Order by input for Person GraphQL type"""
input PersonOrderByInput {
  """Order by options for id"""
  id: OrderBy

  """Order by options for first_name"""
  first_name: OrderBy

  """Order by options for last_name"""
  last_name: OrderBy

  """Order by options for gender"""
  gender: OrderBy

  """Order by options for birth_date"""
  birth_date: OrderBy

  """Order by options for tax_code"""
  tax_code: OrderBy

  """Order by options for city_id"""
  city_id: OrderBy

  """Order by options for cities"""
  cities: CityOrderByInput

  """Conditions to be treated as AND operations"""
  and: [PersonOrderByInput]

  """Conditions to be treated as OR operations"""
  or: [PersonOrderByInput]
}

"""Input type for adding DateTime filters"""
input DateTimeFilterInput {
  """Equals"""
  eq: DateTime

  """Greater Than"""
  gt: DateTime

  """Greater Than or Equal To"""
  gte: DateTime

  """Less Than"""
  lt: DateTime

  """Less Than or Equal To"""
  lte: DateTime

  """Not Equals"""
  neq: DateTime

  """Not null test"""
  isNull: Boolean
}

"""Filter input for Person GraphQL type"""
input PersonFilterInput {
  """Filter options for id"""
  id: IntFilterInput

  """Filter options for first_name"""
  first_name: StringFilterInput

  """Filter options for last_name"""
  last_name: StringFilterInput

  """Filter options for gender"""
  gender: StringFilterInput

  """Filter options for birth_date"""
  birth_date: DateTimeFilterInput

  """Filter options for tax_code"""
  tax_code: StringFilterInput

  """Filter options for city_id"""
  city_id: IntFilterInput

  """Filter options for cities"""
  cities: CityFilterInput

  """Conditions to be treated as AND operations"""
  and: [PersonFilterInput]

  """Conditions to be treated as OR operations"""
  or: [PersonFilterInput]
}

"""Order by input for City GraphQL type"""
input CityOrderByInput {
  """Order by options for id"""
  id: OrderBy

  """Order by options for name"""
  name: OrderBy

  """Order by options for people"""
  people: PersonOrderByInput

  """Conditions to be treated as AND operations"""
  and: [CityOrderByInput]

  """Conditions to be treated as OR operations"""
  or: [CityOrderByInput]
}

"""Filter input for City GraphQL type"""
input CityFilterInput {
  """Filter options for id"""
  id: IntFilterInput

  """Filter options for name"""
  name: StringFilterInput

  """Filter options for people"""
  people: PersonFilterInput

  """Conditions to be treated as AND operations"""
  and: [CityFilterInput]

  """Conditions to be treated as OR operations"""
  or: [CityFilterInput]
}


type Query {
  """Get a list of all the Person items from the database"""
  people(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: PersonFilterInput

    """Ordering options for query"""
    orderBy: PersonOrderByInput
  ): PersonConnection!

  """Get a Person from the database by its ID/primary key"""
  person_by_pk(id: Int!): Person

  """Get a list of all the City items from the database"""
  cities(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: CityFilterInput

    """Ordering options for query"""
    orderBy: CityOrderByInput
  ): CityConnection!

  """Get a City from the database by its ID/primary key"""
  city_by_pk(id: Int!): City
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type PersonConnection {
  """The list of items that matched the filter"""
  items: [Person!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type CityConnection {
  """The list of items that matched the filter"""
  items: [City!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"""
The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255.
"""
scalar Byte

"""
The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1.
"""
scalar Short

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""IEEE 754 32 bit float"""
scalar Single

"""The built-in `Decimal` scalar type."""
scalar Decimal

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

scalar ByteArray

"""
LocalTime is an immutable struct representing a time of day, with no reference to a particular calendar, time zone or date.
"""
scalar LocalTime

scalar UUID